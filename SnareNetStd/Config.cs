using System;
using System.Collections.Generic;

namespace SnareNetStd
{
    /// <summary>
    /// This bad boi can be the dumping ground for vars we need all over the place, such as IPs.
    /// Using the Singleton design pattern with Lazy construction.
    /// Can be improved with Thread locking etc and allows complex type params etc...
    /// </summary>
    public sealed class Config
    {
        private static readonly Lazy<Config> lazy = new Lazy<Config>(() => new Config());

        public static Config Instance { get { return lazy.Value; } }

        private Config()
        {
            C2 = new IpPort();
            ExfilFile = new ExfilConfig();
            Rev = new List<IpPort>();
            Screenshot = new IpPort();
        }

        public IpPort C2 { get; set; }
        public ExfilConfig ExfilFile { get; set; }
        public List<IpPort> Rev { get; set; } // for future use with the multi shell list and tester.
        public IpPort Screenshot { get; set; }

    }

    public enum ConfigTypes
    {
        c2,
        exfil,
        rev,
        screenshot
    }
    public class IpPort
    {
        public string IPAddress { get; set; }
        public int PortNumber { get; set; }
    }

    public class ExfilConfig : IpPort
    {
        public string TargetFilePath { get; set; }
    }
}
