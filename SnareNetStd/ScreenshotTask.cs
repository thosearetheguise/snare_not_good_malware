using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Threading;
using System.Windows.Forms;

namespace SnareNetStd
{
    class ScreenshotTask
    {
        public ScreenshotTask() { KeepGoing = false; }

        private volatile bool _KeepGoing;

        public bool KeepGoing
        {
            get { return _KeepGoing; }
            set { _KeepGoing = value; }
        }

        /// <summary>
        /// Takes a screenshot every 10 seconds.
        /// </summary>
        public void TakeScreenshots()
        {
            while (_KeepGoing)
            {
                Console.WriteLine("Taking Screenshot");
                screenShotAllScreens();
                Thread.Sleep(10000);
            }
        }

        /// <summary>
        /// Takes a screenshot and saves it to a hardcoded location on the local machine
        /// (Still under deveopment)
        /// From https://www.codeproject.com/Tips/817001/Saving-a-screenshot-using-Csharp-A-K-A-Console-Mon
        /// Hackily altered by meee, probably redundancies that need cleaning up
        /// </summary>
        private void screenShotAllScreens(string saveDir = "")
        {
            foreach (var screen in Screen.AllScreens)
            {
                string fileName = $"{screen.DeviceName.Replace('/', '_') }{ DateTime.Now.ToString("(dd_MMMM_hh_mm_ss_tt)")}";
                Console.WriteLine($"ID {screen.DeviceName}");
                Console.WriteLine($"Height {screen.Bounds.Height} Width {screen.Bounds.Width}");
                Console.WriteLine($"Top {screen.Bounds.Top} Bottom {screen.Bounds.Bottom}");
                Console.WriteLine($"Left {screen.Bounds.Left} Right {screen.Bounds.Right}");
                Console.WriteLine($"X {screen.Bounds.X} Y {screen.Bounds.Y}");

                Console.WriteLine("Taking screenshot...");
                int TLX = screen.Bounds.X; //TL = top left
                int TLY = screen.Bounds.Y; //TL = top left
                Bitmap memoryImage;
                memoryImage = new Bitmap(screen.Bounds.Width, screen.Bounds.Height);
                Size s = new Size(memoryImage.Width, memoryImage.Height);

                Graphics memoryGraphics = Graphics.FromImage(memoryImage);

                memoryGraphics.CopyFromScreen(TLX, TLY, 0, 0, s);

                if (!string.IsNullOrWhiteSpace(saveDir))
                {
                    fileName = $@"{saveDir}\{fileName}";
                }
                else
                {
                    fileName = $@"{Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)}\ss\{fileName}";
                }

                //That's it! Save the image in the directory and this will work like charm.
                ImageConverter converter = new ImageConverter();
                var ImageBytes = (byte[])converter.ConvertTo(memoryImage, typeof(byte[]));

                using (var ms = new MemoryStream(ImageBytes))
                {
                    var img = Image.FromStream(ms);
                    ImageCodecInfo jpgEncoder = GetEncoder(ImageFormat.Jpeg);
                    Encoder myEncoder = Encoder.Quality;

                    EncoderParameters myEncoderParameters = new EncoderParameters(1);
                    EncoderParameter myEncoderParameter = new EncoderParameter(myEncoder, 75L); // 75% quality
                    myEncoderParameters.Param[0] = myEncoderParameter;

                    img.Save($@"{fileName}.jpg", jpgEncoder, myEncoderParameters);
                }

                // Write the message,
                Console.WriteLine("Picture has been saved...");

            }
        }

        /// <summary>
        /// From https://docs.microsoft.com/en-us/dotnet/framework/winforms/advanced/how-to-set-jpeg-compression-level
        /// </summary>
        /// <param name="format"></param>
        /// <returns></returns>
        private ImageCodecInfo GetEncoder(ImageFormat format)
        {
            ImageCodecInfo[] codecs = ImageCodecInfo.GetImageDecoders();
            foreach (ImageCodecInfo codec in codecs)
            {
                if (codec.FormatID == format.Guid)
                {
                    return codec;
                }
            }
            return null;
        }


    }
}
