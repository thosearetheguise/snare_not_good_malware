#!/usr/bin/python3
from http.server import BaseHTTPRequestHandler, HTTPServer
from cgi import parse_header, parse_multipart
from urllib import parse
from base64 import b64decode
from hashlib import md5
import os

class S(BaseHTTPRequestHandler):
        
    def do_POST(self):
        ctype, pdict = parse_header(self.headers['content-type'])
        #		print (ctype)
        content_length = int(self.headers['Content-Length'])
        #		print (content_length)
        postvars = parse.parse_qs(self.rfile.read(content_length),keep_blank_values=1)
        #		print (postvars)
        file_name = postvars['fileName'.encode('utf-8')][0].decode('utf-8')
        #		print (FileName)
        file_content_b64 = postvars['fileContentB64'.encode('utf-8')][0].decode('utf-8')
        #		print (FileContentB64)
        original_md5 = postvars['fileCheckSum'.encode('utf-8')][0].decode('utf-8')
        #		print (OriginalMD5)
        file = open("uploads/"+file_name, "w+")
        file.write(b64decode(file_content_b64).decode('utf-8'))
        file.close()
        saved_file_md5 = md5(file_as_bytes(open("uploads/"+file_name, 'rb'))).hexdigest()
        #		print (SavedFileMD5)
        if(saved_file_md5.lower() == original_md5.lower()):
            print ("Saved file: "+ file_name)
            self.send_response(200)
            self.send_header('Content-Type', 'application/html')
            self.end_headers()
            self.wfile.write(b"OK")
        else:
            print ("Checksum mismatch: "+original_md5 +" vs "+SavedFileMd5)
            self.send_response(500)
            self.send_header('Content-Type', 'application/html')
            self.end_headers()
            self.wfile.write(b"FAILED")

def file_as_bytes(file):
	with file:
		return file.read()

def run(server_class=HTTPServer, handler_class=S, port=80):
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    print ('Starting httpd...')
    httpd.serve_forever()

if __name__ == "__main__":
    uploads_dir = "uploads"
    from sys import argv
    if not os.path.exists(uploads_dir):
        os.makedirs(uploads_dir)
    if len(argv) == 2:
        run(port=int(argv[1]))
    else:
        run()

